;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; SET pin 0 should be mapped to your LED GPIO

.program pio_example

pull block              ; Pull from FIFO to OSR (only happens once)
nop
wait 1 irq 0            ; Wait to start both waves synchronously

.wrap_target            ; Program wraps to here
; ACTIVE
mov x, osr [2]             ; Copy value from OSR to x scratch register
set pins, 1
high:
    jmp x-- high        ; Remain in active mode, decrementing counter
; INACTIVE
mov x, osr [2]
set pins, 0
low:
    jmp x-- low         ; Remain in inactive mode, decrementing counter
.wrap


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void pio_example_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {

    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = pio_example_program_get_default_config(offset);

    sm_config_set_set_pins(&c, pin, 1);

    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);

    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    sm_config_set_out_pins(&c, pin, 1);

    //sm_config_set_out_shift(&c, true, true, 32);

    sm_config_set_clkdiv(&c, div);

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}
%}

.program pio_example_wave
.side_set 1 opt

pull block                  ; Pull from FIFO to OSR (only once)
set y, 0
wait 1 irq 0                ; Wait to start both waves synchronously

.wrap_target
; ACTIVE
mov x, osr [1]              ; Copy value from OSR to x scratch register
jmp !y begin
shift_loop:
    jmp y-- begin
begin:
set pins, 1
high:
    jmp x-- high           ; Remain in active mode, decrementing counter
; INACTIVE
mov x, osr [2]
set pins, 0
public low:
    jmp x-- low            ; Remain in inactive mode, decrementing counter

.wrap


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void pio_example_wave_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {

    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = pio_example_wave_program_get_default_config(offset);

    sm_config_set_set_pins(&c, pin, 1);

    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);

    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    sm_config_set_out_pins(&c, pin, 1);

    //sm_config_set_out_shift(&c, true, true, 32);

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}
%}

.program interrupt_controller

nop [10]
irq 0 [1]

.wrap_target
nop
.wrap


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void interrupt_controller_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {

    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = interrupt_controller_program_get_default_config(offset);

    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}
%}
