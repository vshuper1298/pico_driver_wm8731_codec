;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; SET pin 0 should be mapped to your LED GPIO

.program pio_example

loop:
    pull
    out pins, 1
    nop [31]
    pull
    out pins, 1
    nop [31]
    jmp loop


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void pio_example_program_init(PIO pio, uint sm, uint offset, uint pin) {

    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = pio_example_program_get_default_config(offset);

    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);

    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    sm_config_set_out_pins(&c, pin, 1);

    //sm_config_set_out_shift(&c, true, true, 32);

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}

.program pio_example_wave
set y, 2 ; n variable, represents a single up-down wave width multiplier
;out isr, 32
mainloop:
    ; mov x, y
    ; delay_loop:
    ;     ;nop [31]
    ;     jmp x-- delay_loop
    ;nop [31]
    pull
    out pins, 1
    mov x, y
    hi_loop:
        nop [31]
        jmp x-- hi_loop
    pull
    out pins, 1
    mov x, y
    lo_loop:
        nop [31]
        jmp x-- lo_loop
    jmp mainloop


% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void pio_example_wave_program_init(PIO pio, uint sm, uint offset, uint pin) {

    // Sets up state machine and wrap target. This function is automatically
    // generated in blink.pio.h.
    pio_sm_config c = pio_example_wave_program_get_default_config(offset);

    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, pin);

    // Set the pin direction to output (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    sm_config_set_out_pins(&c, pin, 1);

    //sm_config_set_out_shift(&c, true, true, 32);

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
